@require: pervasives
@require: class-slydifi/theme/arctic
@require: figbox/figbox
@require: easytable/easytable
@require: annot
@require: base/typeset/base
@require: math

open FigBox
open EasyTableAlias
open SlydifiOverlay

let stripe = stripe-r SlydifiThemeArctic.config#color#bg-code

let set-font-size-ratio r ctx =
  let fsize = (get-font-size ctx) *' r in
  ctx |> set-font-size fsize
      |> set-paragraph-margin (fsize *' 0.65) (fsize *' 0.65)
      |> set-min-gap-of-lines 0pt
      |> set-leading (fsize *' 1.4)

let-inline ctx \Rust =
  let ctx =
    ctx |> set-font Latin (`system:AlfaSlabOne-Regular`, 1.1, 0. -. 0.04)
  in
  read-inline ctx {Rust}

let-block ctx +emphbox it =
  let wid = get-text-width ctx in
  let fbf wid =
    let fb = textbox it in
    let bg-color =
      SlydifiThemeArctic.config#color#emph
        |> color-inner ?:0.8 SlydifiThemeArctic.config#color#bg
    in
    glass-box ?:(align-center, align-center) wid 40pt fb
      |> bgcolor bg-color
  in
  read-block ctx '<+fig-center(fbf wid);>

in

document '<

+make-title(|
  title = {| \SATySFi; Language Server の | 現状と今後 |};
  author = {| monaqa |};
  date = {| 2021年6月26日 |};
|);

+frame{自己紹介}<

  +fig-on-right(include-image 130pt `fig/pdf/logo-190727.pdf` |> frame 0.8pt (Color.black) )<%

    +listing{
      * 名前：monaqa
        ** Twitter: \link?:({\@mo_naqa})(`https://twitter.com/mo_naqa`);
        ** GitHub: \link?:({monaqa})(`https://github.com/monaqa`);

      * 技術系コミュニティ所属

        ** \SATySFi; Slack
        ** vim-jp Slack
        ** Rust-jp Slack

      * \SATySFi; 歴：2年ぐらい
    }
  >%
>

+frame{今までに作った \SATySFi; 関連のプログラム}<

  +listing{
    * \SATySFi; クラスファイル・パッケージ

      \fig-center(textbox ?:(set-font-size-ratio 0.8) {
        \easytable?:[stripe; t; b;][c; l]{
          | \link?:({\textbf{\SLyDIFi;}})(`https://github.com/monaqa/slydifi`);
          | スライド作成用のクラスファイル（\textbf{本スライドも \SLyDIFi; 製}）
          | \link?:({\textbf{easytable}})(`https://github.com/monaqa/satysfi-easytable`);
          | シンプルな記法で書ける表組版（\link?:({\SATySFi; Conf 2020})(`https://connpass.com/event/174844/`); で発表）
          | \link?:({\textbf{figbox}})(`https://github.com/monaqa/satysfi-figbox`);
          | 柔軟な図表の配置
          | \link?:({\textbf{railway}})(`https://github.com/monaqa/satysfi-railway`);
          | グラフィックスの作成支援
          | \link?:({\textbf{enumitem}})(`https://github.com/monaqa/satysfi-enumitem`);
          | 豊富なスタイルの箇条書き
          | \link?:({\textbf{AZMath}})(`https://github.com/monaqa/satysfi-azmath`);
          | アクセント、括弧、\link?:({amsmath})(`https://www.ctan.org/pkg/amsmath`); ライクな数式環境
          |}
      });

    * その他

      \fig-center(textbox ?:(set-font-size-ratio 0.8) {
        \easytable?:[stripe; t; b;][c; l]{
          | \link?:({\textbf{satysfi-parser}})(`https://github.com/monaqa/satysfi-parser`);
          | Rust 製の \SATySFi; パーサ
          | \link?:({\emph{satysfi-language-server}})(`https://github.com/monaqa/satysfi-language-server`);
          | Rust 製の \SATySFi; language server（\textbf{今日のお話}）
          |}
      });
  }


>

+namedframe(`toc`){目次}<
  +listing{
    * Language Server Protocol
    * \SATySFi; Language Server の現状
    * \SATySFi; Language Server の実装
    * \SATySFi; Language Server の今後の課題と発展性
  }
>

+section{|Language Server Protocol |}<%

+frame{Language Server Protocol (LSP)}<

  +p{
    コード補完やエラー情報の提示など、開発（+ 執筆）に役立つ様々な機能をあらゆるエディタに提供するために考案されたプロトコル。
  }

  +fig-center(include-image 640pt `fig/pdf/lsp-overview.pdf` |> frame 2pt SlydifiThemeArctic.config#color#fg);

>

+frame{Language Server（言語サーバ）}<

  +p{
    ある言語の開発に役立つ機能をサービスとして提供したもの。
  }

  +p{
    言語別に実装され、以下のような機能を提供する。
  }

  +fig-center(textbox ?:(set-font-size-ratio 0.8) {
    \easytable?:[stripe; t; b; v 1;]
    ?:[
      set-fmt-(6, 1) c;
    ][r; lw 460pt]{
      | 補完 % (completion)
      | ユーザが挿入しようとしている変数名・メソッド名などを予測して候補を表示する
      | 診断情報表示 % (diagnostics)
      | 静的解析によるエラーや警告を表示する
      | 詳細表示 % (hover)
      | カーソル上の変数・関数の型情報やドキュメンテーションなどを表示する
      | 定義ジャンプ %\br; (goToDefinition)
      | カーソル上の変数が定義されている場所に移動する
      | リネーム % (rename)
      | カーソル上の変数名を変更する
      | コードアクション % \br; (code action)
      | 言語に応じて様々な処理を実行する（カーソル下にあるモジュールのインポート、getter/setter の自動作成など）
      | ${\vdots}
      | ${\vdots}
      |}
  } |> vmargin 0pt);

>


+frame?:(3){なぜ LSP が注目されているのか}<

  +listing{
    * \select(till 2){LSP の登場前}{LSP の登場\emph{後}}
      ** \embed(select (fun i -> (match i with
         | 1 -> {エディタ・言語毎に各々プラグインや拡張を作る必要があった}
         | 2 -> {マイナーなエディタ・言語では使用者が少なく実装も進まない}
         | 3 -> {各言語・エディタの実装が1つで済むため、無駄が少なく開発も楽}
      )));
  }

    +fig-center(
      include-image ?:(select (fun x -> x)) 630pt `fig/pdf/ls-overview.pdf`
        |> frame 1.5pt (SlydifiThemeArctic.config#color#fg)
    );

>

>%

+section{| \SATySFi; Language Server の現状 |}<%

+frame?:(2){\SATySFi; Language Server とは}<
    +fig-center(
      include-image ?:(select (fun x -> x + 2)) 630pt `fig/pdf/ls-overview.pdf`
    );
>

+frame{ \SATySFi; Language Server }<
  +listing{
    * 以下の GitHub リポジトリで開発中

      \fig-block?:(align-left)(
        textbox {
          \link?:({
            \fig-inline(include-image 400pt `fig/pdf/satysfi-language-server.pdf`);
          })(`https://github.com/monaqa/satysfi-language-server`);
        }
      );

    * 現在動作を確認しているクライアント
      ** \link?:({Neovim})(`https://github.com/neovim/neovim`); + \link?:({coc.nvim})(`https://github.com/neoclide/coc.nvim`);
         （本スライドの作成にも使用）
      ** \link?:({Visual Studio Code})(`https://code.visualstudio.com`);（拡張機能のデバッグモードでのみ）
        *** 本スライドでは利用者が多いであろう VSCode でのデモの様子を掲載
        *** ちゃんとした VSCode の拡張をどなたか作ってもらえると助かります

  }
>

+namedframe(`functions`){現在提供している機能\ghost(after 3){（再掲）}}<
  +listing{
    * \emph?:(only 2){\weak?:(fun i -> elsewhen 1 i && elsewhen 2 i){診断情報の表示}}
    * \emph?:(only 3){\weak?:(fun i -> elsewhen 1 i && elsewhen 3 i){詳細情報のホバー表示}}
    * \emph?:(only 4){\weak?:(fun i -> elsewhen 1 i && elsewhen 4 i){定義ジャンプ}}
    * \emph?:(only 5){\weak?:(fun i -> elsewhen 1 i && elsewhen 5 i){補完}}
  }
>

+againframe(`functions`);

+frame{診断情報の表示}<

  +emphbox{
    構文エラーの箇所と原因を表示
  }

  +fig-center(include-image 540pt `fig/jpg/vscode-diagnostics-1.jpg`);

  +listing{
    * いくつかのエラーについては具体的なエラー原因を表示
    * パーサの手に負えないものはエラー箇所と期待される字句のみ表示
  }

>

+againframe(`functions`);

+frame?:(2){詳細情報のホバー表示}<

  +emphbox{
    変数やコマンドにカーソルを合わせると、その詳細を表示
  }

  +fig-center(vconcat ?:align-center [
    select (fun i -> (
      match i with
      | 1 -> include-image 600pt `fig/jpg/vscode-hover-1.jpg`
      | 2 -> include-image 600pt `fig/jpg/vscode-hover-2.jpg`
    ));
    gap 10pt;
    textbox {
      （現在は変数/コマンドの種類と、判明しているもののみ型情報を表示）
    }
  ]);

>

+againframe(`functions`);

+frame?:(3){定義ジャンプ}<

  +emphbox{
    コマンドや変数の定義にジャンプ（ファイルを跨いでも有効）
  }

    +fig-center( select (fun i -> (
      match i with
      | 1 -> include-image 600pt `fig/jpg/vscode-gotodefinition-1.jpg`
      | 2 -> include-image 600pt `fig/jpg/vscode-gotodefinition-2.jpg`
      | 3 -> include-image 600pt `fig/jpg/vscode-gotodefinition-3.jpg`
    )));

>

+againframe(`functions`);

+frame?:(3){コマンドの補完機能}<

  +emphbox{
    ユーザが示す文字列に続く名前のコマンドを候補に表示
  }

  +fig-center(vconcat ?:align-center [
    select (fun i -> (
      match i with
      | 1 -> include-image 600pt `fig/jpg/vscode-completion-1.jpg`
      | 2 -> include-image 600pt `fig/jpg/vscode-completion-2.jpg`
      | 3 -> include-image 600pt `fig/jpg/vscode-completion-3.jpg`
    ));
    gap 10pt;
    textbox {（ソースコードを読んで補完候補を生成）}
  ]);

>

+frame?:(2){変数名の補完}<

  +emphbox{
    プログラムモードでは変数や関数名も補完できる
  }

  +fig-center( select (fun i -> ( match i with
    | 1 -> include-image 600pt `fig/jpg/vscode-completion-4.jpg`
    | 2 -> include-image 600pt `fig/jpg/vscode-completion-5.jpg`
  )));

>

+frame{補完機能の特徴}<

  +emphbox{
    カーソル位置のモードを考慮して補完候補を表示
  }

  +fig-center(
    hconcat [
      vconcat ?:align-center [
        textbox {プログラムモードのとき};
        gap 15pt;
        include-image 310pt `fig/jpg/vscode-completion-invalid-2.jpg`
      ];
      sep ?:(stroke-line 2pt (SlydifiThemeArctic.config#color#separator)) 40pt;
      vconcat ?:align-center [
        textbox {水平モードのとき};
        gap 15pt;
        include-image 310pt `fig/jpg/vscode-completion-invalid-1.jpg`
      ]
    ]
  );

  +fig-center(textbox ?:(set-font-size-ratio 0.9) {
    （垂直モード以外のところではブロックコマンドの補完が出てこない）
  });

>

+frame?:(2){補完機能の特徴}<

  +emphbox{コマンド引数の型に応じて異なるスニペットを展開}

  +select(only 1)<
    +fig-center(
      vconcat [
        include-image 600pt `fig/jpg/vscode-completion-snippet-1.jpg`;
        gap 20pt;
        include-image 600pt `fig/jpg/vscode-completion-snippet-2.jpg`;
      ]
    );
  ><
    +fig-center(textbox ?:(set-font-size-ratio 0.9) {
      \easytable[c; c]{
        |型                |スニペット展開結果
        |`inline-text`     |`{}`
        |`block-text`      |`<  >`
        |`inline-text list`|`{| |}`
        |その他の `list`   |`[];`
        |その他の型        |`();`
        |}
    });
  >

>

+frame{\SATySFi; Language Server の使用感}<

  +listing{
    * 基本的に、静的型付け言語と LSP は相性が良い
      ** 静的解析で型が判明すれば賢い補完や診断情報をユーザに提示できるため

    * \SATySFi; も例外ではない

      ** 変数やコマンドに型が付くことで開発体験が向上する
        *** モードに応じた補完候補の出し分け
        *** 型に応じたスニペットの出し分け
        *** etc.

      ** \SATySFi;の型システムに詳しくないライトユーザこそ使ってほしい

      ** 開発者の実力とリソースさえ揃えば、かなり便利な機能が実現できる
  }

>

>%


+section{|\SATySFi; Language Server の実装|}<

+frame{実装言語：\Rust;}<

  +listing{
    * Rust を選んだ理由
      ** Rust を学びたかった
      ** 優れたパフォーマンス・省メモリ性・安全性に惹かれた
      ** 静的型付け言語であること由来の書きやすさに惹かれた
      ** Rust で書かれた代表的な language server が複数あった

         \fig-block?:(0.)(textbox ?:(set-font-size-ratio 0.85) {
           \easytable?:[stripe; t; b][l; l]{
             | Rust
             | \link?:({rust-analyzer})(`https://github.com/rust-analyzer/rust-analyzer`);
             | Deno
             | \link?:({Deno Language Server})(`https://github.com/denoland/deno/tree/main/cli/lsp#deno-language-server`);
             | \LaTeX;
             | \link?:({TexLab})(`https://github.com/latex-lsp/texlab`);
             |}

         });
  }
>

+frame{パーサの実装}<
  +listing{

    * パーサは language server と別リポジトリで開発

      \fig-block?:(align-left)(
        textbox {
          \link?:({
            \fig-inline(include-image 400pt `fig/pdf/satysfi-parser.pdf`);
          })(`https://github.com/monaqa/satysfi-parser`);
        }
      );

    * \textbf{Parsing expression grammar} (PEG) を用いたパーサ
      ** \link?:({rust-peg})(`https://crates.io/crates/peg`); というパーサジェネレータを使用
    * 現在は字句解析と構文解析を同時に行う
      ** エラー回復やカーソル位置のモードの把握に難あり
  }
>

+frame{サーバ機能の実装（概観）}<
  +listing{
    * `DocumentData` 構造体にファイルの内容を保持
      ** ファイルの文字列
      ** 構文木
      ** \textbf{環境} (`Environment`)
        *** モジュール（名前、定義の位置）
        *** 変数（名前、型情報、定義の位置）
        *** コマンド（名前、型情報、定義の位置）
  }
>

+frame{各リクエストに対する処理の流れ（抜粋）}<
  +listing{
    * ファイルが開かれたとき/変更されたとき (didOpen/didChange)
      ** ファイルを構文解析し、成功したらそのファイルの `Environment` を作成
      ** 未解析の依存パッケージ (`@require: xxxx` / `@import: xxxx`) を構文解析し、
         成功すれば先程同様 `Environment` を作成
    * 補完リクエストがあったとき (completion)
      ** カーソル位置のモード（水平モード、数式モードなど）を構文木から取得
      ** そのモードに出現しうる変数/コマンドのうち、
         カーソル位置をスコープに含むものを `Environment` から検索
      ** 得られた変数/コマンドを返却
        *** コマンドの場合、型情報があればスニペットを作成
  }
>

>


+section{| \SATySFi; Language Server の | 今後の課題と発展性 |}<%

+frame{エラー回復機構が強力なパーサ}<

  +listing{
    * \textbf{エラー回復}：文法の誤りを含むコードを適切に処理すること
      ** Language server が処理するテキストには文法エラーが高確率で含まれる
        *** 例：補完リクエスト時に送られる、入力途中のテキスト

      ** ちゃんとやるのはかなり難しい
        *** 文法には規則があるが、誤りには一般に規則がない

      ** 最低限必要なエラー回復処理はすでに実装
        *** 不完全なコマンド文法への対処など

    * 現時点では、1つでも回復不能なエラーがあると情報を全く取れなくなる
      ** カーソル位置のモードや依存パッケージぐらいは取りたい
  }

>

+frame{型検査・型推論機能の追加}<

  +listing{
    * まだ型検査・型推論器は実装されていない

    * 変数・コマンドの型推論・型検査によって実現できそうなこと

      ** 型エラーの診断情報表示
      ** シグニチャが明記されていないコマンド・変数の補完、詳細情報表示
      ** レコードのフィールド名での補完候補の絞り込み
      ** パイプライン演算子直後の補完候補の絞り込み
      ** etc.
  }

>


+frame{その他の発展性}<

  +listing{
    * \textbf{Doc comment} のホバー表示
      ** ソースコードに直接書かれたドキュメントを参照する機能
      ** 現在
         \link?:({doc comment 機能})(`https://github.com/gfngfn/SATySFi/wiki/%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%81%84%E6%A9%9F%E8%83%BD%E3%81%A8%E3%81%9D%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8#2020-03-22-doc-comment`);
         が言語本体の機能として構想されている

    * \textbf{Auto import}
      ** コマンド補完の際やコードアクションによって必要な依存を自動解決
      ** 予め `~/.satysfi/dist/packages` などの全ファイルを見ておけば可能

    * \textbf{Code action} （言語ならではの特別な編集操作を実現する機能）
      ** 未定義のコマンドがあるとき、その定義の雛形をプリアンブルに追加
      ** モジュール内で定義した関数・コマンドのシグニチャを `sig` に追加

  }
>


>%

+section-noframe<

+frame{まとめ}<
    +listing{
      * \SATySFi; language server を開発中
        ** 補完機能、定義ジャンプ、ホバー、エラーの表示などの機能を実装
        ** \link?:({Neovim})(`https://github.com/neovim/neovim`);
           + \link?:({coc.nvim})(`https://github.com/neoclide/coc.nvim`); や
           \link?:({Visual Studio Code})(`https://code.visualstudio.com`); 上で動く
      * 今後も様々な発展性が考えられる
        ** エラー回復機構の強力なパーサ
        ** 型推論・型検査器
        ** その他、Doc comment や Auto import など

    }

    +fig-on-right(
      hconcat [
        textbox {
          \link?:({
            \fig-inline(include-image-with-height 80pt `fig/pdf/satysfi-language-server.pdf`);
          })(`https://github.com/monaqa/satysfi-language-server`);
        };
        include-image 80pt `fig/jpg/qr-satysfi-language-server.jpg`

      ]
    )<

      +listing{
        * 是非使ってみてください！
      }

    >

  >

>



>
