%% arctic.satyh
%%
%% SLyDIFi theme file.
%%
%% This slide theme is heavily inspired by the iceberg.vim colorscheme.
%% [iceberg.vim](https://github.com/cocopon/iceberg.vim): Copyright (c) 2014 cocopon <cocopon@me.com>
%% https://github.com/cocopon/iceberg.vim/blob/master/colors/iceberg.vim

@require: gr
@require: annot
@require: railway/railway
@require: base/color-ext
@require: base/int
@require: class-slydifi/slydifi
@require: class-slydifi/footnote
@require: enumitem/enumitem

module SlydifiThemeArctic: sig

  val config: (|
    font : (|
      normal : font-config;
      bold : font-config;
      code : font-config;
      slide-title : font-config;
      slide-author : font-config;
      slide-date : font-config;
      section-title : font-config;
      frame-title : font-config;
      pagenum : font-config;
      footnote : font-config;
      quote : font-config;
    |);
     color : (|
       % basic
       bg : color;
       fg : color;
       emph : color;
       weak : color;
       red : color;
       green : color;
       link : color;
       bg-code : color;

       % frame template
       bg-slide-section : color;
       bg-slide-author : color;
       separator : color;
       pagenum : color;
       indicator-total : color;
       indicator-done : color;

       % decoration
       quote : color;
       quote-line : color;

       % listing
       bullet-dia : color;
       bullet-tria : color;
       bullet-circ : color;
     |);
      length : (|
        frame-title-height : length;
        frame-title-left-margin : length;
        frame-title-bot-margin : length;
        frame-body-top-margin : length;
        indicator-line-thickness: length;
        indicator-bar-width: length;
        frame-footer-xmargin: length;
        frame-footer-ymargin: length;
      |)
  |)

  val layout: frame-layout

  val document: block-text -> document

% frames
  %% スライドマスター。
  val frame-master: unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title:
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
      Frame.frame
  %% セクションフレーム。
  val frame-section-title: ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: ((| title: inline-text; inner: block-text; footer: bool |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-section-title に従って通常のスライドを生成する。
  direct +section : [inline-text?; inline-text list; block-text;] block-cmd

  direct +section-noframe : [inline-text?; block-text;] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +frame : [int?; inline-text; block-text;] block-cmd
  direct +frame-nofooter : [int?; inline-text; block-text;] block-cmd
  direct +namedframe : [string; inline-text; block-text;] block-cmd
  direct +againframe : [int?; string] block-cmd

% decoration commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \weak : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd
  direct +quote : [block-text] block-cmd

% listing

  direct +listing : [int?; itemize] block-cmd
  direct \listing : [int?; itemize] inline-cmd
  direct +listing-overlay : [int?; itemize] block-cmd
  direct +enumerate-overlay : [int?; itemize] block-cmd
  direct \cond-item : [(int -> bool)] inline-cmd
  val label-dia  : int list -> context -> inline-boxes
  val label-tria : int list -> context -> inline-boxes
  val label-circ : int list -> context -> inline-boxes
  val label-rule : int list -> context -> inline-boxes

% itemize

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

end = struct

  let section-name = SlydifiParam.make {}

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 142.9mm;
    text-width = 254mm -' 40pt;
    text-height = 142.9mm -' 30pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 10pt;
  |)

% configuration

  let config =
    let set-font-metrics fsize ctx =
      ctx |> set-font-size fsize
          |> set-paragraph-margin (fsize *' 0.65) (fsize *' 0.65)
          |> set-min-gap-of-lines 0pt
          |> set-leading (fsize *' 1.4)
    in
    let default-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font Kana           (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`system:mplus-1m-regular`, 1.0, 0.0)
          |> set-hyphen-min 1000 1000  % ハイフンを無効化
          |> set-space-ratio-between-scripts 0. 0. 0. Latin Kana
          |> set-space-ratio-between-scripts 0. 0. 0. Kana Latin
          |> set-space-ratio-between-scripts 0. 0. 0. Latin HanIdeographic
          |> set-space-ratio-between-scripts 0. 0. 0. HanIdeographic Latin
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
    in

    (|
      font = (|
        normal = [default-font; set-font-metrics 20pt];
        bold = [bold-font];
        code = [code-font];
        slide-title = [bold-font; set-font-metrics 32pt];
        slide-author = [default-font; set-font-metrics 24pt;];
        slide-date = [default-font; set-font-metrics 20pt;];
        section-title = [bold-font; set-font-metrics 32pt];
        frame-title = [bold-font; set-font-metrics 28pt];
        pagenum = [default-font; set-font-metrics 12pt;];
        footnote = [default-font; set-font-metrics 10.8pt; set-leading 14.4pt; set-paragraph-margin 6pt 6pt;];
        quote = [default-font; set-font-metrics 18pt;];
      |);
      color = (|
        % basic
        bg = Color.of-css `#e8e9ec`;
        fg = Color.of-css `#33374c`;
        emph = Color.of-css `#7759b4`;
        weak = Color.of-css `#8389a3`;
        red = Color.of-css `#cc517a`;
        green = Color.of-css `#668e3d`;
        link = Color.of-css `#2d539e`;
        bg-code = Color.of-css `#dcdfe7`;

        % frame template
        bg-slide-author = Color.of-css `#1e2132`;
        bg-slide-section = Color.of-css `#6b7089`;
        separator = Color.of-css `#6b7089`;
        pagenum = Color.of-css `#6b7089`;
        indicator-total = Color.of-css `#cad0de`;
        indicator-done = Color.of-css `#3f83a6`;

        % listing
        bullet-dia = Color.of-css `#3f83a6`;
        bullet-tria = Color.of-css `#3f83a6`;
        bullet-circ = Color.of-css `#3f83a6`;

        quote = Color.of-css `#33374c`;
        quote-line = Color.of-css `#33374c`;
      |);
      length = (|
        frame-title-height = 36pt;
        frame-title-left-margin = 10pt;
        frame-title-bot-margin = 10pt;
        frame-body-top-margin = 14pt;
        indicator-line-thickness = 5pt;
        indicator-bar-width = 30pt;
        frame-footer-xmargin = 10pt;
        frame-footer-ymargin = 8pt;
      |)
    |)

  let-inline ctx \code code =
    let ctx =
      ctx |> SlydifiScheme.apply-font-cfg config#font#code
          |> set-text-color config#color#fg
    in
    let fsize = get-font-size ctx in
    let dpt = fsize *' 0.3 in
    let hgt = fsize *' 1.0 in
    let pads = (fsize *' 0.15, fsize *' 0.15, fsize *' 0.1, fsize *' 0.1) in

    let rectangle-round-fill r extra color =
      let decoS (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round r (x, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      let decoH (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-left r (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoM (x, y) wid _ _ =
        [ fill color (Gr.rectangle (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoT (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-right r (x -' extra, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      (decoS, decoH, decoM, decoT)
    in

    let ib = read-inline ctx (embed-string code) in
    inline-frame-breakable pads (rectangle-round-fill 2pt 1pt config#color#bg-code) ib
      |> script-guard Latin

  let document bt =
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> SlydifiScheme.apply-font-cfg config#font#normal
          |> set-text-color config#color#fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% frames

  let frame-master =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color#bg
      ])
    in
    Frame.make layout f

  let frame-master-with-footer =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      let pagenum = SlydifiParam.get page-num in
      let total = get-cross-reference `pagecount` |> Option.from `1` in

      let gr-page-number =
        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let ctx-pagenum =
          ctx |> SlydifiScheme.apply-font-cfg config#font#pagenum
              |> set-text-color config#color#pagenum
        in
        let ib = read-inline ctx-pagenum {#it-pagenum;/#it-total;} in
        let (wid, _, dp) = get-natural-metrics ib in
        let x = layout#paper-width -' wid -' config#length#frame-footer-xmargin in
        let y = dp +' config#length#frame-footer-ymargin in
        [ draw-text (x, y) ib ]
      in

      let gr-section-title =
        if (section-name |> SlydifiParam.has-changed) then
          let it = section-name |> SlydifiParam.get in
          let ctx-pagenum =
            ctx |> SlydifiScheme.apply-font-cfg config#font#pagenum
                |> set-text-color config#color#pagenum
          in
          let ib = read-inline ctx-pagenum it in
          let (wid, _, dp) = get-natural-metrics ib in
          let x = (layout#paper-width -' wid) *' 0.5 in
          [ draw-text (x, dp +' config#length#frame-footer-ymargin) ib ]
        else
          []
      in

      let gr-progress-bar =
        let progress =
          let float-pagenum = float pagenum in
          let float-total =
            let int-total = Int.of-string total in
            float (if int-total <= 1 then 2 else int-total)  % ゼロ割などの回避
          in
          (float-pagenum -. 1.) /. (float-total -. 1.)
        in
        let y = (layout#paper-height *' (1.0 -. progress)) in
        % let bar-done =
        %   Gr.rectangle (0pt, 0pt) (x, config#length#indicator-line-thickness)
        %     |> fill config#color#indicator-done
        % in
        let bar-done =
          let vert-line = Rail.init |> Rail.push-line (0pt, config#length#indicator-bar-width) in
          let side = Rail.(
            circular-sector ?:(180.) (config#length#indicator-line-thickness *' 0.5)
          )
          in
          Rail.(concat [
            vert-line;
            side;
            vert-line |> reverse;
            side ^ 180.
          ] |> to-loop (layout#paper-width, y -' (config#length#indicator-bar-width *' 0.5))
          )
            |> fill config#color#indicator-done
        in

        let bar-total =
          Gr.rectangle (layout#paper-width -' config#length#indicator-line-thickness, 0pt) (layout#paper-width, layout#paper-height)
            |> fill config#color#indicator-total
        in
        [
          bar-total;
          bar-done;
        ]
      in

      (block-nil, [gr-frame-master; gr-section-title; gr-progress-bar; gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = relwid 0.8 in
      let title-xmin = relwid 0.1 in
      let title-ymin = relht 0.5 in
      let date-ymax = relht 0.2 in
      let title-mgn = 24pt in

      let gr-background =
        [
          Gr.rectangle (0pt, 0pt) (relwid 1.0, relht 0.6) |> fill config#color#bg-slide-author;
          Gr.rectangle (0pt, relht 0.5) (relwid 1.0, relht 1.0) |> fill config#color#fg;
        ]
      in

      let gr-title =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-title
            |> set-text-color config#color#bg
          in
          let bbf ctx =
            content#title |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-bottom ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin +' title-mgn) ib
      in

      let gr-author =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-author
            |> set-text-color config#color#bg
          in
          let bbf ctx =
            content#author |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-top ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, title-ymin -' title-mgn -' ht) ib
      in

      let gr-date =
        let ib =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#slide-date
            |> set-text-color config#color#bg
          in
          let bbf ctx =
            content#date |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-top ctx title-width bbf
        in
        let (_, ht, dp) = get-natural-metrics ib in
        draw-text (title-xmin, date-ymax -' title-mgn -' ht) ib
      in

      (block-nil, [gr-frame-master; gr-background; [gr-title; gr-author; gr-date]] |> List.concat)

    in
    Frame.make layout f

  let frame-section-title =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master |> Frame.embed ctx () in

      % 設定
      let relwid r = layout#paper-width *' r in
      let relht r = layout#paper-height *' r in
      let title-width = layout#paper-width *' 0.8 in
      let title-xmin = layout#paper-width *' 0.1 in
      let title-ymin = layout#paper-height *' 0.45 in
      let date-ymax = layout#paper-height *' 0.2 in
      let title-mgn = 24pt in
      let color-mirror = Color.of-css `#636983` in

      let mirror-transform = linear-transform-graphics 1. 0.0 0. (0. -. 0.8) in

      % タイトルのグラフィックス
      let gr-background =
        [
          Gr.rectangle (0pt, 0pt) (relwid 1.0, title-ymin) |> fill config#color#bg-slide-section;
        ]
      in

      let gr-title =
        let ibf clr =
          let ctx = ctx
            |> SlydifiScheme.apply-font-cfg config#font#section-title
            |> set-text-color clr
          in
          let bbf ctx =
            content#title |> List.map (fun it ->
              line-break true true ctx (inline-fil ++ (read-inline ctx it) ++ inline-fil))
                |> List.fold-left (+++) block-nil
          in
          embed-block-bottom ctx title-width bbf
        in
        let gr-title = draw-text (title-xmin, title-ymin +' title-mgn) (ibf config#color#fg) in
        let gr-title-inv =
          draw-text (0pt, title-mgn) (ibf color-mirror)
            |> mirror-transform
            |> shift-graphics (title-xmin, title-ymin)
        in
        [ gr-title; gr-title-inv; ]
      in

      (block-nil, [gr-frame-master; gr-background; gr-title] |> List.concat)

    in
    Frame.make layout f

  let frame-normal =
    let f ctx content =
      % content#footer の値に応じてフッターをつけるかどうか変える
      let (_, gr) =
        if content#footer then
          frame-master-with-footer |> Frame.embed ctx ()
        else
          frame-master |> Frame.embed ctx ()
      in

      let title-ymin = layout#paper-height -' config#length#frame-title-height in

      let gr-separator =
        let xleft = config#length#frame-title-left-margin in
        let xright = layout#paper-width -' config#length#frame-title-left-margin in
        let y = title-ymin -' config#length#frame-title-bot-margin in
        [Gr.line (xleft, y) (xright, y) |> stroke 1pt config#color#separator]
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx
          |> SlydifiScheme.apply-font-cfg config#font#frame-title
        in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length#frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-blank skip =
        line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-fil
      in
      let bb-inner =
        bb-blank (config#length#frame-title-height +' config#length#frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in


      (bb-inner, [gr; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title)(1)(content);
    >

  let-block ctx +section ?:short-name title inner =
    let bb-section = read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title)(1)(|title = title;|);
    >
    in
    let it-title =
      let default = title |> List.fold-left (fun it1 it2 -> {#it1;#it2;}) {} in
      short-name |> Option.from default
    in
    let () = section-name |> SlydifiParam.set it-title in
    let bb-inner = read-block ctx inner in
    let () = section-name |> SlydifiParam.discard in

    bb-section +++ bb-inner

  let-block ctx +section-noframe ?:short-name inner =
    let it-title =
      short-name |> Option.from {}
    in
    let () = section-name |> SlydifiParam.set it-title in
    let bb-inner = read-block ctx inner in
    let () = section-name |> SlydifiParam.discard in
    bb-inner



  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal)(n-frame)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +frame-nofooter ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal)(n-frame)(|title = title; inner = inner; footer = false|);
    >

  let-block ctx +namedframe name title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    read-block ctx '<
      +SlydifiScheme.namedframe(frame-normal)(name)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +againframe ?:lyr name =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    match lyr with
    | Some(lyr) -> read-block ctx '<
      +SlydifiScheme.againframe?:(lyr)(name);
    >
    | None -> read-block ctx '<
      +SlydifiScheme.againframe(name);
    >

% inline commands

  let-inline ctx \emph ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> SlydifiScheme.apply-font-cfg config#font#bold
            |> set-text-color config#color#emph
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \weak ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> set-text-color config#color#weak
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (SlydifiScheme.apply-font-cfg config#font#bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color#link
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> SlydifiScheme.apply-font-cfg config#font#code
            |> set-text-color config#color#link
        in
        read-inline ctx {\href(url)(text);}

  let-block ctx +quote bt =
    let deco (x, y) w h d =
      [
        fill config#color#quote-line (Gr.rectangle (x, y) (x +' 6pt, y +' h))
      ]
    in
    block-frame-breakable ctx (20pt, 0pt, 10pt, 10pt)
      (deco, deco, deco, deco)
        (fun ctx -> (
          let ctx2 = ctx
            |> set-text-color config#color#quote
            |> SlydifiScheme.apply-font-cfg config#font#quote
          in
          (read-block ctx2 bt)
        ))

% listing

  let label-dia (idx :: _) ctx =
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let edge = Rail.( init |> push-line (fsize *' 0.25, fsize *' 0.25) ) in
      let gr =
        Rail.(map-repeat (fun i -> edge ^ (90. *. (float i))) 4)
          |> Rail.to-loop (x +' fsize *' 0.25, y +' fsize *' 0.1)
          |> fill config#color#bullet-dia
      in
      [gr]
    in
    inline-graphics 16pt 8pt 0pt grf

  let label-tria (idx :: _) ctx =
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let gr =
        Rail.(
          init |> push-line (fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt -' fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt, 0pt -' fsize *' 0.4)
               |> to-loop (x, y +' fsize *' 0.1)
        ) |> fill config#color#bullet-tria
      in
      [gr]
    in
    let path (x, y) =
      let yc = y +' fsize *' 0.3 in
      let xl = x in
      let xr = x +' fsize *' 0.4 in
      let yu = yc +' fsize *' 0.2 in
      let yd = yc -' fsize *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill config#color#bullet-tria (path (x, y))] in
    inline-graphics 16pt 8pt 0pt grf

  let label-circ (idx :: _) ctx =
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cx = x +' fsize *' 0.3 in
      let cy = y +' fsize *' 0.3 in
      let r = fsize *' 0.15 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill config#color#bullet-circ (path (x, y))] in
    inline-graphics 16pt 8pt 0pt (gr)

  let label-rule idxlst =
    match (List.length idxlst) with
    | 1 -> label-dia idxlst
    | 2 -> label-tria idxlst
    | _ -> label-circ idxlst

  let gen-label-rule d idxlst =
    match (List.length idxlst + d - 1) with
    | 1 -> label-dia idxlst
    | 2 -> label-tria idxlst
    | _ -> label-circ idxlst

  let-rec power-float-int r m =
    match m with
    | 0 -> 1.
    | _ -> (power-float-int r (m - 1)) *. r

  let max-float f1 f2 = if (1pt *' f1) >' (1pt *' f2) then f1 else f2

  let gen-arctic-item d ctx depth ib-label text =
    let shrink-ratio =
      max-float (power-float-int 0.95 (depth + d - 1)) 0.85
    in
    let ctx-item =
      let fsize = (get-font-size ctx) *' shrink-ratio in
      ctx |> set-font-size fsize
          % |> set-paragraph-margin (fsize *' 0.75) (fsize *' 0.75)
    in
    let text-indent =
      let fsize = get-font-size ctx-item in
      fsize *' (1.2 *. (float depth))
    in
    let ib-text =
      let index-width = get-natural-width ib-label in
      let item-text-width = (get-text-width ctx) -' text-indent -' index-width in
      embed-block-top ctx-item item-text-width (fun ctx ->
        line-break true true ctx (read-inline ctx text ++ inline-fil)
      )
    in
    line-break true true ctx-item
      ((inline-skip text-indent) ++ ib-label ++ ib-text)

  let arctic-item = gen-arctic-item 1

  let-block ctx +listing ?:depth item =
    let depth = depth |> Option.from 1 in
    read-block ctx '< +genlisting(gen-label-rule depth)(gen-arctic-item depth)(item); >

  let-inline ctx \listing ?:depth item =
    let depth = depth |> Option.from 1 in
    read-inline ctx {\listing-from-block<+listing?:(depth)(item);>}

  let param-item-overlay = EnumitemBase.make-param (fun x -> false)
  let-inline \cond-item dcf = {\set-item(param-item-overlay)(dcf);}

  let-block ctx +listing-overlay ?:depth item =
    let depth = depth |> Option.from 1 in
    let itemf = SlydifiOverlay.select-from-two (EnumitemParam.get param-item-overlay)
      (gen-arctic-item depth)
        (fun _ _ _ _ -> block-nil)
    in
    read-block ctx '< +xgenlisting(gen-label-rule depth)(itemf)(item); >

  let-block ctx +enumerate-overlay ?:depth item =
    let depth = depth |> Option.from 1 in
    read-block ctx '< +xgenlisting(Enumitem.dot-arabic)(
      fun ctx dp label inner -> (
        let () = display-message (
          `param-item-overlay: ` ^
            (if (EnumitemParam.get param-item-overlay 1) then `1` else ` `) ^
            (if (EnumitemParam.get param-item-overlay 2) then `2` else ` `) ^
            (if (EnumitemParam.get param-item-overlay 3) then `3` else ` `)
        )
        in
        SlydifiOverlay.select-from-two (EnumitemParam.get param-item-overlay)
          (gen-arctic-item depth ctx dp label inner) block-nil
      )
    )(item); >

% \footnote{} command

  let-inline ctx \footnotetext ref-label it =
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = SlydifiScheme.apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = SlydifiScheme.apply-font-cfg config#font#footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf

end

let document = SlydifiThemeArctic.document
